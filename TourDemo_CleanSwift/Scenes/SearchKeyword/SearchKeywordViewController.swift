//
//  SearchKeywordViewController.swift
//  TourDemo_CleanSwift
//
//  Created by N4158 on 2022/02/07.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchKeywordDisplayLogic: AnyObject
{
    func displaySearchItem(viewModel: SearchKeyword.FetchKeywordItems.ViewModel)
}

class SearchKeywordViewController: UIViewController, SearchKeywordDisplayLogic
{
    @IBOutlet var searchBar:UISearchBar!
    
    var interactor: SearchKeywordBusinessLogic?
    var router: (NSObjectProtocol & SearchKeywordRoutingLogic & SearchKeywordDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchKeywordInteractor()
        let presenter = SearchKeywordPresenter()
        let router = SearchKeywordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var startDateTextField: UITextField!
    @IBOutlet weak var endDateTextField: UITextField!
    
    var displayedItems:[SearchKeyword.FetchKeywordItems.ViewModel.DisplayedSearchItem] = []
    
    @IBAction func searchBtnAction(_ sender: Any) {
        doSearch()
    }
    
    
    func doSearch()
    {
        let request = SearchKeyword.FetchKeywordItems.Request(keyword:"강원")
        interactor?.doSearch(request: request)
    }
    
    func displaySearchItem(viewModel: SearchKeyword.FetchKeywordItems.ViewModel)
    {
        for item in viewModel.displayedSearchItems {
            print(item.title)
        }
        displayedItems = viewModel.displayedSearchItems
        tableView.reloadData()
    }
}

extension SearchKeywordViewController:UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedItems.count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SearchKeywordTableViewCell", for: indexPath) as? SearchKeywordTableViewCell
        let displayedSearchItem = displayedItems[indexPath.row]
        cell!.bindUI(data: displayedSearchItem)
        return cell!
    }
    
}

extension SearchKeywordViewController: UISearchBarDelegate
{
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if  searchBar.text!.count > 0   {
            let request = SearchKeyword.FetchKeywordItems.Request(keyword: searchBar.text!)
            interactor?.doSearch(request: request)
        }
        
    }
}
