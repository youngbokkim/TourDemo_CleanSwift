//
//  SearchMapRouter.swift
//  TourDemo_CleanSwift
//
//  Created by N4158 on 2022/02/07.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol SearchMapRoutingLogic
{
  func routeToFestivalDetail(segue: UIStoryboardSegue?)
}

protocol SearchMapDataPassing
{
  var dataStore: SearchMapDataStore? { get }
}

class SearchMapRouter: NSObject, SearchMapRoutingLogic, SearchMapDataPassing
{
  weak var viewController: SearchMapViewController?
  var dataStore: SearchMapDataStore?
  
  // MARK: Routing
  
  func routeToFestivalDetail(segue: UIStoryboardSegue?)
  {
    if let segue = segue {
      let destinationVC = segue.destination as! FestivalDetailViewController
      var destinationDS = destinationVC.router!.dataStore!
        passDataToFestivalDetail(source: dataStore!, destination: &destinationDS)
    } else {
      let storyboard = UIStoryboard(name: "Main", bundle: nil)
      let destinationVC = storyboard.instantiateViewController(withIdentifier: "FestivalDetailViewController") as! FestivalDetailViewController
      var destinationDS = destinationVC.router!.dataStore!
        passDataToFestivalDetail(source: dataStore!, destination: &destinationDS)
        navigateToFestivalDetail(source: viewController!, destination: destinationVC)
    }
  }
    
    // MARK: Navigation
    
    func navigateToFestivalDetail(source: SearchMapViewController, destination: FestivalDetailViewController)
    {
        source.show(destination, sender: nil)
    }
    
    //   MARK: Passing data
    
    func passDataToFestivalDetail(source: SearchMapDataStore, destination: inout FestivalDetailDataStore)
    {
        let row = viewController?.selectrow ?? -1
        
        guard row >= 0 else {
            destination.festivalInfo = nil
            return
        }
        
        guard let item = source.searchItem?.response.body.items.item[row] else {
            destination.festivalInfo = nil
            return
        }
        
        do {
            let jsonData = try JSONEncoder().encode(item)
            let festival = try JSONDecoder().decode(Festival.self, from: jsonData)
            destination.festivalInfo = festival
            
        } catch { print(error) }
    }
}
