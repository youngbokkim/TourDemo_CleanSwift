//
//  SearchMapViewController.swift
//  TourDemo_CleanSwift
//
//  Created by N4158 on 2022/02/07.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

class FestivalLocation: NSObject, MKAnnotation{

 var identifier = "Festival location"
 var title: String?
 var subtitle: String?
 var coordinate: CLLocationCoordinate2D
 var row:Int = -1

    init(row:Int, title:String, subtitle:String, lat:CLLocationDegrees, long:CLLocationDegrees){
        self.row = row
        self.title = title
        self.coordinate = CLLocationCoordinate2DMake(lat, long)
        self.subtitle = subtitle
    }
}


protocol SearchMapDisplayLogic: AnyObject
{
    func displaySearchItem(viewModel: SearchMap.FetchLocationItems.ViewModel)
}

class SearchMapViewController: UIViewController, SearchMapDisplayLogic
{
    @IBOutlet weak var mapView: MKMapView!
    
    let locationManager = CLLocationManager()
    var selectrow:Int = -1
    
    var interactor: SearchMapBusinessLogic?
    var router: (NSObjectProtocol & SearchMapRoutingLogic & SearchMapDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchMapInteractor()
        let presenter = SearchMapPresenter()
        let router = SearchMapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.requestWhenInUseAuthorization()
        locationManager.startUpdatingLocation()
        mapView.showsUserLocation = true
        mapView.delegate = self
    }
    
    
    // MARK: Do something
    func doSomething(coordinate:CLLocationCoordinate2D) {
        
        let request = SearchMap.FetchLocationItems.Request(latitude: coordinate.latitude,
                                                           longitude: coordinate.longitude)
        interactor?.doSomething(request: request)
    }
    
    func displaySearchItem(viewModel: SearchMap.FetchLocationItems.ViewModel)
    {
        for (index,item) in viewModel.displayedSearchItems.enumerated() {
            print(item.title)

            setAnnotation(row:index,
                          latitudeValue: item.mapy,
                          longitudeValue: item.mapx,
                          title: item.title,
                          subtitle: item.tel)
        }
    }
    
    func setAnnotation(row:Int,
                       latitudeValue: CLLocationDegrees,
                       longitudeValue: CLLocationDegrees,
                       title strTitle: String,
                       subtitle strSubTitle:String){
        
        let annotation = FestivalLocation(row: row,
                                          title: strTitle,
                                          subtitle: strSubTitle,
                                          lat: latitudeValue,
                                          long: longitudeValue)
        mapView.addAnnotation(annotation)
    }
    
    func goLocation(latitudeValue: CLLocationDegrees,
                    longtudeValue: CLLocationDegrees,
                    delta span: Double) -> CLLocationCoordinate2D {
        
        let pLocation = CLLocationCoordinate2DMake(latitudeValue, longtudeValue)
        let spanValue = MKCoordinateSpan(latitudeDelta: span, longitudeDelta: span)
        let pRegion = MKCoordinateRegion(center: pLocation, span: spanValue)
        mapView.setRegion(pRegion, animated: true)
        return pLocation
    }
    

}

extension SearchMapViewController: MKMapViewDelegate {
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        
        if let pin = view.annotation as? FestivalLocation , pin.row > -1 {
            self.selectrow = pin.row
        }
        
        self.performSegue(withIdentifier: "FestivalDetail", sender: nil)
    }
}

extension SearchMapViewController: CLLocationManagerDelegate {
    
    //37.55373 / 126.97588
   func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {

       let pLocation = locations.last
       
       locationManager.stopUpdatingLocation()
       
       guard let coordinate = pLocation?.coordinate else { return }
       
       _ = goLocation(latitudeValue: coordinate.latitude,
                  longtudeValue: coordinate.longitude,
                      delta: 0.1)
       
       self.doSomething(coordinate: coordinate)
   }
}
