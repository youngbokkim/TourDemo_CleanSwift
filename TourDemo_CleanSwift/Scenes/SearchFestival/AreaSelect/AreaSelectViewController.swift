//
//  AreaSelectViewController.swift
//  TourDemo_CleanSwift
//
//  Created by N4158 on 2022/02/16.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

protocol AreaSelectDisplayLogic: AnyObject
{
    func displayAreaItems(viewModel: AreaSelect.FetchAreaItems.ViewModel)
}

class AreaSelectViewController: UIViewController, AreaSelectDisplayLogic
{
    var interactor: AreaSelectBusinessLogic?
    var router: (NSObjectProtocol & AreaSelectRoutingLogic & AreaSelectDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AreaSelectInteractor()
        let presenter = AreaSelectPresenter()
        let router = AreaSelectRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        bindTableView()
        fetchAreaList()
    }
    
    // MARK: Do something
    
    let disposeBag = DisposeBag()
    private var subject: BehaviorRelay<[AreaSelect.FetchAreaItems.ViewModel.DisplayedAreaItem]> = BehaviorRelay(value: [])
    
    @IBOutlet weak var tableView: UITableView!
    
    
    func bindTableView(){
        subject.bind(to: tableView.rx.items(cellIdentifier: "AreaSelectTableViewCell")) {
            index, model, cell in
            (cell as! AreaSelectTableViewCell).titleLabel.text = model.title
        }
        .disposed(by: disposeBag)
        
        tableView.rx.itemSelected.subscribe { indexPath in
            print("\(indexPath)")
        }.disposed(by: disposeBag)
        
        tableView.rx.modelSelected(AreaSelect.FetchAreaItems.ViewModel.DisplayedAreaItem.self).subscribe { [self] res in
            print("\(res)")
            let req = AreaSelect.FetchAreaItems.ViewModel.DisplayedAreaItem(title: res.element!.title, code: res.element!.code)
            self.interactor?.selectAreaCode(request: req)
            self.dismiss(animated: true, completion: nil)
        }.disposed(by: disposeBag)
    }
    
    func fetchAreaList()
    {
        let request = AreaSelect.FetchAreaItems.Request(areaCode: "0")
        interactor?.getAreaCode(request: request)
    }
    
    func displayAreaItems(viewModel: AreaSelect.FetchAreaItems.ViewModel)
    {
        subject.accept(viewModel.displayedAreaItems)
    }
}
