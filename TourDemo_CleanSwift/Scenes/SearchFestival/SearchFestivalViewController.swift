//
//  SearchFestivalViewController.swift
//  TourDemo_CleanSwift
//
//  Created by N4158 on 2022/02/07.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

protocol SearchFestivalDisplayLogic: AnyObject
{
    func displaySearchItem(viewModel: SearchFestival.FetchSearchItems.ViewModel)
}

class SearchFestivalViewController: UIViewController, SearchFestivalDisplayLogic
{
    var interactor: SearchFestivalBusinessLogic?
    var router: (NSObjectProtocol & SearchFestivalRoutingLogic & SearchFestivalDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchFestivalInteractor()
        let presenter = SearchFestivalPresenter()
        let router = SearchFestivalRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        bindTableView()
        bindSelectArea()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    let disposeBag = DisposeBag()
    private var subject: BehaviorRelay<[SearchFestival.FetchSearchItems.ViewModel.DisplayedSearchItem]> = BehaviorRelay(value: [])

    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var startDateTextField: UITextField!
    @IBOutlet weak var endDateTextField: UITextField!
    @IBOutlet weak var selectAreaBtn: UIButton!
    var areaCode:Int = 0
    
    var displayedItems:[SearchFestival.FetchSearchItems.ViewModel.DisplayedSearchItem] = []
    
    private func bindTableView(){
        subject.bind(to: tableView.rx.items(cellIdentifier: "SearchFestivalTableViewCell")) {
            index, model, cell in
            (cell as! SearchFestivalTableViewCell).bindUI(data: model)
            
        }.disposed(by: disposeBag)
    }
    
    private func bindSelectArea(){
        interactor?.selectArea().subscribe(onNext: { res in
            print("code:\(res.code) title:\(res.title)")
            self.selectAreaBtn.setTitle(res.title, for: .normal)
            self.areaCode = res.code
        }).disposed(by: disposeBag)
    }
    
    @IBAction func searchBtnAction(_ sender: Any) {
        doSearch()
    }
    
    func doSearch()
    {
        var startDate = startDateTextField.text
        if ((startDateTextField.text?.isEmpty) != nil) {
            startDate = "20210101"
        }
        let endDate = endDateTextField.text ?? ""
        let request = SearchFestival.FetchSearchItems.Request(startDate: startDate!, endDate: endDate, areaCode: self.areaCode)
        interactor?.doSearch(request: request)
    }
    
    func displaySearchItem(viewModel: SearchFestival.FetchSearchItems.ViewModel)
    {
        subject.accept(viewModel.displayedSearchItems)
    }
}


